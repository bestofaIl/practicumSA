### A Pluto.jl notebook ###
# v0.19.30

using Markdown
using InteractiveUtils

# ╔═╡ 632b4b96-06ab-4bc0-8c69-34f9a1adaa9c
begin
	using Statistics
	using LinearAlgebra
	using BenchmarkTools
end

# ╔═╡ b58f8490-9110-11ee-2f15-7924757ab41a
# ╠═╡ disabled = true
#=╠═╡
begin
	# Массив 4x3 со случайными целыми числами (от 1 до 20):
	a = rand(1:20,(4,3))
	# Поэлементная сумма:
	sum(a)
	# Поэлементная сумма по столбцам:
	sum(a,dims=1)
	# Поэлементная сумма по строкам:
	sum(a,dims=2)
	# Поэлементное произведение:
	prod(a)
	# Поэлементное произведение по столбцам:
	prod(a,dims=1)
	# Поэлементное произведение по строкам:
	prod(a,dims=2)
end
  ╠═╡ =#

# ╔═╡ 9731a6fb-6e16-4cfb-af6a-c90d4aab3ee3
# ╠═╡ disabled = true
#=╠═╡
begin
	# Вычисление среднего значения массива:
	mean(a)
	# Среднее по столбцам:
	mean(a,dims=1)
	# Среднее по строкам:
	mean(a,dims=2)
end
  ╠═╡ =#

# ╔═╡ 690b96f4-4785-49d1-842c-5e4eb6fb4e33
# ╠═╡ disabled = true
#=╠═╡
begin
	# Массив 4x4 со случайными целыми числами (от 1 до 20):
	b = rand(1:20,(4,4))
	# Транспонирование:
	transpose(b)
	# След матрицы (сумма диагональных элементов):
	tr(b)
	# Извлечение диагональных элементов как массив:
	diag(b)
	# Ранг матрицы:
	rank(b)
	# Инверсия матрицы (определение обратной матрицы):
	inv(b)
	# Определитель матрицы:
	det(b)
	# Псевдобратная функция для прямоугольных матриц:
	pinv(a)
	
end
  ╠═╡ =#

# ╔═╡ 250027be-fa5c-499f-9cad-fe4c5b90318a
# ╠═╡ disabled = true
#=╠═╡
begin
	# Создание вектора X:
	X = [2, 4, -5]
	# Вычисление евклидовой нормы:
	println(norm(X))
	# Вычисление p-нормы:
	p = 1
	norm(X,p)
end
  ╠═╡ =#

# ╔═╡ 09cf0f92-4267-4a97-935a-3e8e24f8274e
# ╠═╡ disabled = true
#=╠═╡
begin
	# Расстояние между двумя векторами X и Y:
	X = [2, 4, -5];
	Y = [1,-1,3];
	norm(X-Y)
end
  ╠═╡ =#

# ╔═╡ 8fe01fa9-930e-4a36-81c2-2732111dae22
# ╠═╡ disabled = true
#=╠═╡
# Проверка по базовому определению:
sqrt(sum((X-Y).^2))

  ╠═╡ =#

# ╔═╡ 5ada817d-cb2b-4b08-9035-dbb1122fb3d4
# ╠═╡ disabled = true
#=╠═╡
# Угол между двумя векторами:
acos((transpose(X)*Y)/(norm(X)*norm(Y)))
  ╠═╡ =#

# ╔═╡ 80b2a223-4039-40b8-a377-8854594a2291
# ╠═╡ disabled = true
#=╠═╡
begin
	# Создание матрицы:
	d = [5 -4 2 ; -1 2 3; -2 1 0]
	# Вычисление Евклидовой нормы:
	opnorm(d)
	# Вычисление p-нормы:
	p=1
	opnorm(d,p)
	# Поворот на 180 градусов:
	rot180(d)
	# Переворачивание строк:
	reverse(d,dims=1)
	# Переворачивание столбцов
	reverse(d,dims=2)
end
  ╠═╡ =#

# ╔═╡ ff375113-e3e1-4ea0-a648-db1a1951f34a
# ╠═╡ disabled = true
#=╠═╡
begin
	# Матрица 2x3 со случайными целыми значениями от 1 до 10:
	A = rand(1:10,(2,3))
	# Матрица 3x4 со случайными целыми значениями от 1 до 10:
	B = rand(1:10,(3,4))
	# Произведение матриц A и B:
	A*B
	
end
  ╠═╡ =#

# ╔═╡ 2d05369a-8386-467f-9aaa-8918eb4aa03f
# ╠═╡ disabled = true
#=╠═╡
begin
	# Единичная матрица 3x3:
	Matrix{Int}(I, 3, 3)
	# Скалярное произведение векторов X и Y:
	X = [2, 4, -5]
	Y = [1,-1,3]
	dot(X,Y)
	# тоже скалярное произведение:
	X'Y
end
  ╠═╡ =#

# ╔═╡ f93fdf98-5c9f-4215-9556-9f39c44cbde2
# ╠═╡ disabled = true
#=╠═╡
begin
	# Задаём квадратную матрицу 3x3 со случайными значениями:
	A = rand(3, 3)
	# Задаём единичный вектор:
	x = fill(1.0, 3)
	# Задаём вектор b:
	b = A*x
	# Решение исходного уравнения получаем с помощью функции \
	# (убеждаемся, что x - единичный вектор):
	A\b
end
  ╠═╡ =#

# ╔═╡ 0af0c710-7e4e-4927-83a5-ce4c969a1601
# ╠═╡ disabled = true
#=╠═╡
# LU-факторизация:
Alu = lu(A)

  ╠═╡ =#

# ╔═╡ 8483eaac-1d4c-4893-8ebf-895c303322d1
# ╠═╡ disabled = true
#=╠═╡
begin
	# Матрица перестановок:
	Alu.P
	# Вектор перестановок:
	Alu.p
	# Матрица L:
	Alu.L
	# Матрица U:
	Alu.U
	
end
  ╠═╡ =#

# ╔═╡ 3f5f8733-680f-4c36-b747-6955af1cfd0f
# ╠═╡ disabled = true
#=╠═╡
begin
	# Решение СЛАУ через матрицу A:
	A\b
	# Решение СЛАУ через объект факторизации:
	Alu\b
	
end
  ╠═╡ =#

# ╔═╡ eac1ff55-86ad-40dc-978e-90b3984f3d78
# ╠═╡ disabled = true
#=╠═╡
begin
	# Аналогично можно найти детерминант матрицы:
	# Детерминант матрицы A:
	det(A)
	# Детерминант матрицы A через объект факторизации:
	det(Alu)
end
  ╠═╡ =#

# ╔═╡ 0590574c-5481-49af-8e44-e8db30d09e4b
# ╠═╡ disabled = true
#=╠═╡
# QR-факторизация:
Aqr = qr(A)
  ╠═╡ =#

# ╔═╡ 3c28655e-282d-4e0b-a979-ee1f0d0fcda5
# ╠═╡ disabled = true
#=╠═╡
begin
	# Матрица Q:
	Aqr.Q
	# Матрица R:
	Aqr.R
	# Проверка, что матрица Q - ортогональная:
	Aqr.Q'*Aqr.Q
	
end
  ╠═╡ =#

# ╔═╡ 6a54e226-5f39-456b-826b-9deb9886bab9
# ╠═╡ disabled = true
#=╠═╡
begin
	# Симметризация матрицы A:
	Asym = A + A'
	# Спектральное разложение симметризованной матрицы:
	AsymEig = eigen(Asym)
	# Собственные значения:
	AsymEig.values
	#Собственные векторы:
	AsymEig.vectors
	# Проверяем, что получится единичная матрица:
	inv(AsymEig)*Asym
end
  ╠═╡ =#

# ╔═╡ 6fef692e-1a30-4fb7-9ae4-817bd029b67b
# ╠═╡ disabled = true
#=╠═╡
begin
	# Матрица с рациональными элементами:
	Arational = Matrix{Rational{BigInt}}(rand(1:10, 3, 3))/10
	# Единичный вектор:
	x = fill(1, 3)
	# Задаём вектор b:
	b = Arational*x
	# Решение исходного уравнения получаем с помощью функции \
	# (убеждаемся, что x - единичный вектор):
	Arational\b
	# LU-разложение:
	lu(Arational)
end
  ╠═╡ =#

# ╔═╡ f04d387f-501a-49cc-8184-6a3757a215e0
# ╠═╡ disabled = true
#=╠═╡
begin
	v = [1,2,3,4,5]
	dot_v = dot(v,v)
end
  ╠═╡ =#

# ╔═╡ bd003d6b-b06b-4817-aa13-f230454f8212
# ╠═╡ disabled = true
#=╠═╡
outer_v = v * v'
  ╠═╡ =#

# ╔═╡ cb8ebdcc-2a2c-4b03-8086-26534ac34aab
# ╠═╡ disabled = true
#=╠═╡
begin
	K = [1 1; 1 -1]
	answers = [2; 3]
	K\answers
end
  ╠═╡ =#

# ╔═╡ da06d5a7-5b59-406b-9579-4f22d575ed9a
# ╠═╡ disabled = true
#=╠═╡
begin
	K2 = [1 1; 2 2]
	answers2 = [2; 4]
	K2\answers2
end
# решений бесконечно
  ╠═╡ =#

# ╔═╡ 8ac254f5-e427-4ca8-ab09-8c13031208a9
# ╠═╡ disabled = true
#=╠═╡
begin
	K3 = [1 1; 2 2]
	answers3 = [2; 5]
	K3\answers3
end
# пустое множество решений
  ╠═╡ =#

# ╔═╡ 0e0a757b-11da-486c-b7ef-1b21f5510f4c
# ╠═╡ disabled = true
#=╠═╡
begin
	K4 = [1 1; 2 2; 3 3]
	answers4 = [1;2;3]
	K4\answers4
end
  ╠═╡ =#

# ╔═╡ 08e42fc4-6104-4951-8db3-c6f2f3111f16
# ╠═╡ disabled = true
#=╠═╡
begin
	K5 = [1 1; 2 1; 1 -1]
	answers5 = [2;1;3]
	K5\answers5
end
# полученные значения неверны
  ╠═╡ =#

# ╔═╡ 3a43b287-ac3c-407b-85db-653c0fd91325
# ╠═╡ disabled = true
#=╠═╡
begin
	K6 = [1 1; 2 1; 3 2]
	answers6 = [2;1;3]
	K6\answers6
end
  ╠═╡ =#

# ╔═╡ 8623a779-cd04-469d-aa3d-4bec3ef2d999
# ╠═╡ disabled = true
#=╠═╡
begin
	K7 = [1 1 1; 1 -1 -2]
	answers7 = [2;3]
	K7\answers7
end
# решения неверны, так как необходимо минимум 3 уравнения для решения СУ с 3 неизвестными
  ╠═╡ =#

# ╔═╡ e4ab3c98-03f8-48d1-aeb0-841c8a1d0b73
# ╠═╡ disabled = true
#=╠═╡
begin
	K8 = [1 1 1; 2 2 -3;3 1 1]
	answers8 = [2;4;1]
	K8\answers8
end
# решение верное
  ╠═╡ =#

# ╔═╡ 6d44968f-8a8c-4106-96e3-085e7abcd6f2
# ╠═╡ disabled = true
#=╠═╡
begin
	K9 = [1 1 1;1 1 2; 2 2 3]
	answers9 = [1;0;1]
	K9\answers9
end
# пустое множество решений
  ╠═╡ =#

# ╔═╡ 64010da2-2f19-477f-9887-436a72b9ebb5
# ╠═╡ disabled = true
#=╠═╡
begin
	K10 = [1 1 1;1 1 2; 2 2 3]
	answers10 = [1;0;0]
	K10\answers10
end
# пустое множество решений
  ╠═╡ =#

# ╔═╡ d4d0cffa-3d3b-461e-b82f-b8efbd0a1b9d
# ╠═╡ disabled = true
#=╠═╡
begin
	# Добавление шума:
	Asym_noisy = copy(Asym)
	Asym_noisy[1,2] += 5eps()
	# Проверка, является ли матрица симметричной:
	issymmetric(Asym_noisy)
end
  ╠═╡ =#

# ╔═╡ c73e2a50-7a06-4860-9801-b6684611dd50
#=╠═╡
# Явно указываем, что матрица является симметричной:
Asym_explicit = Symmetric(Asym_noisy)
  ╠═╡ =#

# ╔═╡ db50c4ff-fa52-4af1-8b30-2e5ce5682253
# ╠═╡ disabled = true
#=╠═╡
begin
	# Оценка эффективности выполнения операции по нахождению
	# собственных значений симметризованной матрицы:
	@btime eigvals(Asym);
	# Оценка эффективности выполнения операции по нахождению
	# собственных значений зашумлённой матрицы:
	@btime eigvals(Asym_noisy);
	# Оценка эффективности выполнения операции по нахождению
	# собственных значений зашумлённой матрицы,
	# для которой явно указано, что она симметричная:
	@btime eigvals(Asym_explicit);
end
  ╠═╡ =#

# ╔═╡ f4e607a0-b6f4-4362-9537-0c34899f7b3c
# ╠═╡ disabled = true
#=╠═╡
([1 -2; -2 1])^10
  ╠═╡ =#

# ╔═╡ ae68a3f9-b0b9-4b6c-a2aa-033ee01f8acf
# ╠═╡ disabled = true
#=╠═╡
sqrt([5 -2; -2 5])
  ╠═╡ =#

# ╔═╡ 5cae7182-ffc1-4302-a521-92a1a50fff10
# ╠═╡ disabled = true
#=╠═╡
([1 -2; -2 1])^(1/3)
  ╠═╡ =#

# ╔═╡ 0c79a8eb-237b-461f-8117-f4acf3bcefc9
# ╠═╡ disabled = true
#=╠═╡
sqrt([1 2; 2 3])
  ╠═╡ =#

# ╔═╡ cbf0bd7b-ac31-47b2-b5df-139b80878285
# ╠═╡ disabled = true
#=╠═╡
	# Оценка эффективности выполнения операции по нахождению
	# собственных значений:
	@btime eigmax(A)
  ╠═╡ =#

# ╔═╡ 5bfed65e-2ef1-4f4e-8cd1-2f00375519a6
# ╠═╡ disabled = true
#=╠═╡
@btime eigvals(A)
  ╠═╡ =#

# ╔═╡ f4f1a1ca-b6fc-41bc-99b2-c45674cd0c6f
# ╠═╡ disabled = true
#=╠═╡
matrix_new = zeros(5,5)
  ╠═╡ =#

# ╔═╡ 245d3482-225d-4cf2-8a97-5950b691d74b
# ╠═╡ disabled = true
#=╠═╡
begin
	
		@btime for i in 1:1:5
			matrix_new[i, i] = eigenvalues[i]
		end

		
	matrix_new
end
  ╠═╡ =#

# ╔═╡ a61ca57b-7e2c-4fe2-85dc-595fb8ae0d25
# ╠═╡ disabled = true
#=╠═╡
begin
	# Создайте нижнедиагональную матрицу из матрица 𝐴. 
	
	Alu = lu(A)
	@btime lu(A)
	
end
  ╠═╡ =#

# ╔═╡ dad468c8-d0da-4c92-80ba-073a9fbf1fc8
# ╠═╡ disabled = true
#=╠═╡
function is_productive_matrix(matrix, size)
        ans=""
         #единичная матрица
        E = [1 0; 0 1]
        # зададим любые неотрицательные числа
        Y = rand(0:1000, size)
        # По формуле вычислим x - A*x = y
        S = E - matrix
        # найдем значения x
        X = S\Y
        # теперь проверим есть ли среди x отрциательное число
        for i in 1:1:size
            if X[i] < 0
                ans = "Матрица непродуктивная"
                break
            else
                ans = "Матрица продуктивная"
            end
        end
        return ans
    end
  ╠═╡ =#

# ╔═╡ ea4f7981-b382-4724-b4b9-02ed4836e3ad
# ╠═╡ disabled = true
#=╠═╡
function is_productive_matrix_2(matrix, size)
        # единичная матрица
        ans = ""
        E = [1 0; 0 1]
        matrix_new = E - matrix
        inv_matrix_new = inv(matrix_new)
        for i in 1:1:size
            for j in 1:1:size
                if inv_matrix_new[i, j] < 0
                    ans = "Матрица непродуктивная"
                    break
                else
                    ans = "Матрица продуктивная"
                end
            end
        end
        return ans
    end
  ╠═╡ =#

# ╔═╡ 361411bd-8fe5-4c80-894e-e80ee199e735
function is_productive_matrix_3(matrix, size)
        ans=""
        # найдем собственные значения переданной матрицы
        eigenvalues = eigvals(matrix)
        for i in 1:1:size
            if abs(eigenvalues[i]) > 1
                ans = "Матрица непродуктивная"
                break
            else
                ans = "Матрица продуктивная"
            end
        end
        return ans
    end

# ╔═╡ 8766e547-a4c3-487d-8476-d8c41cc69e1c
# ╠═╡ disabled = true
#=╠═╡

	begin
		matrix1 = [1 -2; -2 1]
		Asym = matrix1 + matrix1'
		AsymEig = eigen(Asym)
		inv(AsymEig.vectors) * matrix1 * AsymEig.vectors
	end
  ╠═╡ =#

# ╔═╡ 1087cd86-d1ae-4ad8-aa1a-99ec3e372e3a
# ╠═╡ disabled = true
#=╠═╡
begin
		matrix = [1 -2; -2 3]
		Asym = matrix + matrix'
		AsymEig = eigen(Asym)
		inv(AsymEig.vectors) * matrix * AsymEig.vectors
	end
  ╠═╡ =#

# ╔═╡ 7d2fc667-8a89-4d8d-b0d7-0f06058e5834
# ╠═╡ disabled = true
#=╠═╡
begin
	matrix1 = [1 2; 3 4]
	matrix2 = ([1 2; 3 4]) * (1/2)
	matrix3 = ([1 2; 3 4]) * (1/10)
	println(is_productive_matrix(matrix1, 2))
	println(is_productive_matrix(matrix2, 2))
	println(is_productive_matrix(matrix3, 2))
end
  ╠═╡ =#

# ╔═╡ b78db58f-fedd-4f98-8aa4-0cc5e505fa86
# ╠═╡ disabled = true
#=╠═╡
begin
	matrix1 = [1 2; 3 1]
	matrix2 = ([1 2; 3 1]) * (1/2)
	matrix3 = ([1 2; 3 1]) * (1/10)
	
	println(is_productive_matrix_2(matrix1,2))
	println(is_productive_matrix_2(matrix2,2))
	println(is_productive_matrix_2(matrix3,2))
end
  ╠═╡ =#

# ╔═╡ cc522c93-e7a2-4dca-8b3c-37de9255e7cf
# ╠═╡ disabled = true
#=╠═╡
begin
	A = [140 97 74 168 131
	97 106 89 131 36
	74 89 152 144 71
	168 131 144 54 142
	131 36 71 142 36]
	# eigenvalues = eigvals(A)
end
  ╠═╡ =#

# ╔═╡ 53d03e60-6dba-41a4-8c44-20093a0d9e50
begin
	matrix1 = [1 2; 3 1]
	matrix2 = ([1 2; 3 1])*(1/2)
	matrix3 = ([1 2; 3 1])*(1/10)
	matrix4 = [0.1 0.2 0.3; 0 0.1 0.2; 0 0.1 0.3]
	println(is_productive_matrix_3(matrix1,2))
	println(is_productive_matrix_3(matrix2,2))
	println(is_productive_matrix_3(matrix3,2))
	println(is_productive_matrix_3(matrix4,2))
	
end

# ╔═╡ dd46cf7f-9ec7-404f-8879-f70f2b6c2e48
# ╠═╡ disabled = true
#=╠═╡
begin
	# Трёхдиагональная матрица 1000000 х 1000000:
	n = 1000000;
	A = SymTridiagonal(randn(n), randn(n-1))

end
  ╠═╡ =#

# ╔═╡ b4d4e8b3-481e-46c8-af60-b907008a4343
# ╠═╡ disabled = true
#=╠═╡
begin
		matrix = [1 -2 0; -2 1 2; 0 2 0]
		Asym = matrix + matrix'
		AsymEig = eigen(Asym)
		inv(AsymEig.vectors) * matrix * AsymEig.vectors
	end
  ╠═╡ =#

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
BenchmarkTools = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
LinearAlgebra = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"
Statistics = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"

[compat]
BenchmarkTools = "~1.3.2"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.8.5"
manifest_format = "2.0"
project_hash = "d5cf8a4f1701162135ea052459efbd11c734bc4b"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[deps.BenchmarkTools]]
deps = ["JSON", "Logging", "Printf", "Profile", "Statistics", "UUIDs"]
git-tree-sha1 = "d9a9701b899b30332bbcb3e1679c41cce81fb0e8"
uuid = "6e4b80f9-dd63-53aa-95a3-0cdb28fa8baf"
version = "1.3.2"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"
version = "1.0.1+0"

[[deps.Dates]]
deps = ["Printf"]
uuid = "ade2ca70-3891-5945-98fb-dc099432e06a"

[[deps.JSON]]
deps = ["Dates", "Mmap", "Parsers", "Unicode"]
git-tree-sha1 = "31e996f0a15c7b280ba9f76636b3ff9e2ae58c9a"
uuid = "682c06a0-de6a-54ab-a142-c8b1cf79cde6"
version = "0.21.4"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[deps.LinearAlgebra]]
deps = ["Libdl", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[deps.Logging]]
uuid = "56ddb016-857b-54e1-b83d-db4d58db5568"

[[deps.Mmap]]
uuid = "a63ad114-7e13-5084-954f-fe012c677804"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"
version = "0.3.20+0"

[[deps.Parsers]]
deps = ["Dates", "PrecompileTools", "UUIDs"]
git-tree-sha1 = "a935806434c9d4c506ba941871b327b96d41f2bf"
uuid = "69de0a69-1ddd-5017-9359-2bf0b02dc9f0"
version = "2.8.0"

[[deps.PrecompileTools]]
deps = ["Preferences"]
git-tree-sha1 = "03b4c25b43cb84cee5c90aa9b5ea0a78fd848d2f"
uuid = "aea7be01-6a6a-4083-8856-8a6e6704d82a"
version = "1.2.0"

[[deps.Preferences]]
deps = ["TOML"]
git-tree-sha1 = "00805cd429dcb4870060ff49ef443486c262e38e"
uuid = "21216c6a-2e73-6563-6e65-726566657250"
version = "1.4.1"

[[deps.Printf]]
deps = ["Unicode"]
uuid = "de0858da-6303-5e67-8744-51eddeeeb8d7"

[[deps.Profile]]
deps = ["Printf"]
uuid = "9abbd945-dff8-562f-b5e8-e1ebf5ef1b79"

[[deps.Random]]
deps = ["SHA", "Serialization"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"
version = "0.7.0"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[deps.SparseArrays]]
deps = ["LinearAlgebra", "Random"]
uuid = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"

[[deps.Statistics]]
deps = ["LinearAlgebra", "SparseArrays"]
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"

[[deps.TOML]]
deps = ["Dates"]
uuid = "fa267f1f-6049-4f14-aa54-33bafae1ed76"
version = "1.0.0"

[[deps.UUIDs]]
deps = ["Random", "SHA"]
uuid = "cf7118a7-6976-5b1a-9a39-7adc72f591a4"

[[deps.Unicode]]
uuid = "4ec0a83e-493e-50e2-b9ac-8f72acf5a8f5"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl", "OpenBLAS_jll"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
version = "5.1.1+0"
"""

# ╔═╡ Cell order:
# ╠═632b4b96-06ab-4bc0-8c69-34f9a1adaa9c
# ╠═b58f8490-9110-11ee-2f15-7924757ab41a
# ╠═9731a6fb-6e16-4cfb-af6a-c90d4aab3ee3
# ╠═690b96f4-4785-49d1-842c-5e4eb6fb4e33
# ╠═250027be-fa5c-499f-9cad-fe4c5b90318a
# ╠═09cf0f92-4267-4a97-935a-3e8e24f8274e
# ╠═8fe01fa9-930e-4a36-81c2-2732111dae22
# ╠═5ada817d-cb2b-4b08-9035-dbb1122fb3d4
# ╠═80b2a223-4039-40b8-a377-8854594a2291
# ╠═ff375113-e3e1-4ea0-a648-db1a1951f34a
# ╠═2d05369a-8386-467f-9aaa-8918eb4aa03f
# ╠═f93fdf98-5c9f-4215-9556-9f39c44cbde2
# ╠═0af0c710-7e4e-4927-83a5-ce4c969a1601
# ╠═8483eaac-1d4c-4893-8ebf-895c303322d1
# ╠═3f5f8733-680f-4c36-b747-6955af1cfd0f
# ╠═eac1ff55-86ad-40dc-978e-90b3984f3d78
# ╠═0590574c-5481-49af-8e44-e8db30d09e4b
# ╠═3c28655e-282d-4e0b-a979-ee1f0d0fcda5
# ╠═6a54e226-5f39-456b-826b-9deb9886bab9
# ╠═d4d0cffa-3d3b-461e-b82f-b8efbd0a1b9d
# ╠═c73e2a50-7a06-4860-9801-b6684611dd50
# ╠═db50c4ff-fa52-4af1-8b30-2e5ce5682253
# ╠═dd46cf7f-9ec7-404f-8879-f70f2b6c2e48
# ╠═cbf0bd7b-ac31-47b2-b5df-139b80878285
# ╠═6fef692e-1a30-4fb7-9ae4-817bd029b67b
# ╠═f04d387f-501a-49cc-8184-6a3757a215e0
# ╠═bd003d6b-b06b-4817-aa13-f230454f8212
# ╠═cb8ebdcc-2a2c-4b03-8086-26534ac34aab
# ╠═da06d5a7-5b59-406b-9579-4f22d575ed9a
# ╠═8ac254f5-e427-4ca8-ab09-8c13031208a9
# ╠═0e0a757b-11da-486c-b7ef-1b21f5510f4c
# ╠═08e42fc4-6104-4951-8db3-c6f2f3111f16
# ╠═3a43b287-ac3c-407b-85db-653c0fd91325
# ╠═8623a779-cd04-469d-aa3d-4bec3ef2d999
# ╠═e4ab3c98-03f8-48d1-aeb0-841c8a1d0b73
# ╠═6d44968f-8a8c-4106-96e3-085e7abcd6f2
# ╠═64010da2-2f19-477f-9887-436a72b9ebb5
# ╠═8766e547-a4c3-487d-8476-d8c41cc69e1c
# ╠═1087cd86-d1ae-4ad8-aa1a-99ec3e372e3a
# ╠═b4d4e8b3-481e-46c8-af60-b907008a4343
# ╠═f4e607a0-b6f4-4362-9537-0c34899f7b3c
# ╠═ae68a3f9-b0b9-4b6c-a2aa-033ee01f8acf
# ╠═5cae7182-ffc1-4302-a521-92a1a50fff10
# ╠═0c79a8eb-237b-461f-8117-f4acf3bcefc9
# ╠═cc522c93-e7a2-4dca-8b3c-37de9255e7cf
# ╠═5bfed65e-2ef1-4f4e-8cd1-2f00375519a6
# ╠═f4f1a1ca-b6fc-41bc-99b2-c45674cd0c6f
# ╠═245d3482-225d-4cf2-8a97-5950b691d74b
# ╠═a61ca57b-7e2c-4fe2-85dc-595fb8ae0d25
# ╠═dad468c8-d0da-4c92-80ba-073a9fbf1fc8
# ╠═7d2fc667-8a89-4d8d-b0d7-0f06058e5834
# ╠═ea4f7981-b382-4724-b4b9-02ed4836e3ad
# ╠═b78db58f-fedd-4f98-8aa4-0cc5e505fa86
# ╠═361411bd-8fe5-4c80-894e-e80ee199e735
# ╠═53d03e60-6dba-41a4-8c44-20093a0d9e50
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
