### A Pluto.jl notebook ###
# v0.19.30

using Markdown
using InteractiveUtils

# ╔═╡ a64b2d4f-b3d4-4fa1-ae10-6fb52333280c
begin
	using LinearAlgebra, Statistics
	using Random
	using Primes
end

# ╔═╡ 48e11170-85f7-11ee-0c4d-6940da779cf3
# ╠═╡ disabled = true
#=╠═╡
begin
	# пустой кортеж:
	()
	# кортеж из элементов типа String:
	favoritelang = ("Python","Julia","R")
	# кортеж из целых чисел:
	x1 = (1, 2, 3)
	# кортеж из элементов разных типов:
	x2 = (1, 2.0, "tmp")
	# именованный кортеж:
	x3 = (a=2, b=1+2)
end
  ╠═╡ =#

# ╔═╡ 47aa7228-e53e-4d76-8650-101bd7f2c656
# ╠═╡ disabled = true
#=╠═╡
begin
	# длина кортежа x2:
	length(x2)
	# обратиться к элементам кортежа x2:
	x2[1], x2[2], x2[3]
	# произвести какую-либо операцию (сложение)
	# с вторым и третьим элементами кортежа x1:
	с = x1[2] + x1[3]
	# обращение к элементам именованного кортежа x3:
	x3.a, x3.b, x3[2]
	# проверка вхождения элементов tmp и 0 в кортеж x2
	# (два способа обращения к методу in()):
	in("tmp", x2), 0 in x2
end
  ╠═╡ =#

# ╔═╡ e3363869-652b-4a57-9ee1-d228fcb73efe
# ╠═╡ disabled = true
#=╠═╡
begin
	# создать словарь с именем phonebook:
	phonebook = Dict("Иванов И.И." => ("867-5309","333-5544"), "Бухгалтерия" => "555-2368")
	# вывести ключи словаря:
	keys(phonebook)
	# вывести значения элементов словаря:
	values(phonebook)
	# вывести заданные в словаре пары "ключ - значение":
	pairs(phonebook)
	# проверка вхождения ключа в словарь:
	haskey(phonebook, "Иванов И.И.")
	# добавить элемент в словарь:
	phonebook["Сидоров П.С."] = "555-3344"
	# удалить ключ и связанные с ним значения из словаря
	pop!(phonebook, "Иванов И.И.")
	# Объединение словарей (функция merge()):
	a = Dict("foo" => 0.0, "bar" => 42.0);
	b = Dict("baz" => 17, "bar" => 13.0);
	merge(a, b), merge(b,a)
end
  ╠═╡ =#

# ╔═╡ ab02da8d-6264-48ba-a139-882daff60cc8
# ╠═╡ disabled = true
#=╠═╡
begin
	# создать множество из четырёх целочисленных значений:
	A = Set([1, 3, 4, 5])
	# создать множество из 11 символьных значений:
	B = Set("abrakadabra")
	# проверка эквивалентности двух множеств:
	S1 = Set([1,2]);
	S2 = Set([3,4]);
	issetequal(S1,S2)
	S3 = Set([1,2,2,3,1,2,3,2,1]);
	S4 = Set([2,3,1]);
	issetequal(S3,S4)
	# объединение множеств:
	C=union(S1,S2)
	# пересечение множеств:
	D = intersect(S1,S3)
	# разность множеств:
	E = setdiff(S3,S1)
	# проверка вхождения элементов одного множества в другое:
	issubset(S1,S4)
	# добавление элемента в множество:
	push!(S4, 99)
	# удаление последнего элемента множества:
	pop!(S4)
end
  ╠═╡ =#

# ╔═╡ cc0ef652-f0c2-4806-89c2-7ee45a53c034
# ╠═╡ disabled = true
#=╠═╡
begin
	# создание пустого массива с абстрактным типом:
	empty_array_1 = []
	# создание пустого массива с конкретным типом:
	empty_array_2 = (Int64)[]
	empty_array_3 = (Float64)[]
	# вектор-столбец:
	a = [1, 2, 3]
	# вектор-строка:
	b = [1 2 3]
	# многомерные массивы (матрицы):
	A = [[1, 2, 3] [4, 5, 6] [7, 8, 9]]
	B = [[1 2 3]; [4 5 6]; [7 8 9]]
	# одномерный массив из 8 элементов (массив $1 \times 8$)
	# со значениями, случайно распределёнными на интервале [0, 1):
	c = rand(1,8)
	println(c)
	# многомерный массив $2 \times 3$ (2 строки, 3 столбца) элементов
	# со значениями, случайно распределёнными на интервале [0, 1):
	C = rand(2,3);
	# трёхмерный массив:
	D = rand(4, 3, 2)
end
  ╠═╡ =#

# ╔═╡ 56fef717-73e9-4ce9-b0d3-ba9ae20fbd9c
# ╠═╡ disabled = true
#=╠═╡
begin
	# массив из квадратных корней всех целых чисел от 1 до 10:
	roots = [sqrt(i) for i in 1:10]
	# массив с элементами вида 3*x^2,
	# где x - нечётное число от 1 до 9 (включительно)
	ar_1 = [3*i^2 for i in 1:2:9]
	# массив квадратов элементов, если квадрат не делится на 5 или 4:
	ar_2=[i^2 for i=1:10 if (i^2%5!=0 && i^2%4!=0)]
	
end
  ╠═╡ =#

# ╔═╡ 49bafc8d-10a8-49d6-b3fb-2fa1bb21cb02
# ╠═╡ disabled = true
#=╠═╡
begin
	# одномерный массив из пяти единиц:
	ones(5)
	# двумерный массив 2x3 из единиц:
	ones(2,3)
	# одномерный массив из 4 нулей:
	zeros(4)
	# заполнить массив 3x2 цифрами 3.5
	fill(3.5,(3,2))
	# заполнение массива посредством функции repeat():
	repeat([1,2],3,3)
	repeat([1 2],2,2)
	# преобразование одномерного массива из целых чисел от 1 до 12
	# в двумерный массив 2x6
	a = collect(1:12)
	b = reshape(a,(2,6))
	# транспонирование
	b'
	# транспонирование
	с = transpose(b)
	# массив 10x5 целых чисел в диапазоне [10, 20]:
	ar = rand(10:20, 10, 5)
	# выбор всех значений строки в столбце 2:
	# выбор всех значений в столбцах 2 и 5:
	ar[:, [2, 5]]
	# все значения строк в столбцах 2, 3 и 4:
	ar[:, 2:4]
	# значения в строках 2, 4, 6 и в столбцах 1 и 5:
	ar[[2, 4, 6], [1, 5]]
	# значения в строке 1 от столбца 3 до последнего столбца:
	ar[1, 3:end]
	# сортировка по столбцам:
	sort(ar,dims=1)
	# сортировка по строкам:
	sort(ar,dims=2)
	# поэлементное сравнение с числом
	# (результат - массив логических значений):
	ar .> 14
	# возврат индексов элементов массива, удовлетворяющих условию:
	findall(ar .> 14)
end
  ╠═╡ =#

# ╔═╡ d9f60652-8cba-47c0-a696-8b5a3ab5284b
# ╠═╡ disabled = true
#=╠═╡
begin
	A = Set([0, 3, 4, 9]);
	B = Set([1, 3, 4, 7]);
	C = Set([0, 1, 2, 4, 7, 8, 9]);
	# 𝑃 = 𝐴 ∩ 𝐵 ∪ 𝐴 ∩ 𝐵 ∪ 𝐴 ∩ 𝐶 ∪ 𝐵 ∩ 𝐶.
	P = union(intersect(A,B),intersect(A,B),intersect(A,C),intersect(B,C))
	println(P)
end
  ╠═╡ =#

# ╔═╡ f60b7626-a023-4b35-9c8c-767e181cba5c
# ╠═╡ disabled = true
#=╠═╡
begin
	#Приведите свои примеры с выполнением операций над множествами элементов
	#разных типов.
	
	A = Set([1,2,3]);
	B = Set(["a", "A"]);
	
	# union
	C = union(A,B);
	println(C);

	# intersect
	D = intersect(A,B);
	println(D);

	# setdiff
	E = setdiff(A,B);
	println(E);

	# issubset
	println(issubset(A,B))

	# push!
	push!(A, 4);
	println(A);

	#pop!
	pop!(A, 4);
	println(A);
end
  ╠═╡ =#

# ╔═╡ 4387ae47-fecc-4c3d-86e9-97653c9fe19b
# ╠═╡ disabled = true
#=╠═╡
begin
	#массив (1, 2, 3, … 𝑁 − 1, 𝑁 ), 𝑁 выберите больше 20;
	N = 21;
	A = collect(1:N);
	println(A)
end
  ╠═╡ =#

# ╔═╡ 012874f1-ff0b-4eb2-9a8c-b348d6724528
# ╠═╡ disabled = true
#=╠═╡
begin
	# массив (𝑁, 𝑁 − 1 … , 2, 1), 𝑁 выберите больше 20;
	N = 21;
	A = [i for i in N:-1:1]
	println(A)
end
  ╠═╡ =#

# ╔═╡ 619c9cff-af24-4823-895b-345445770a46
# ╠═╡ disabled = true
#=╠═╡
begin
	# массив (1, 2, 3, … , 𝑁 − 1, 𝑁, 𝑁 − 1, … , 2, 1), 𝑁 выберите больше 20;
		N = 21;
		A = vcat([i for i in 1:1:N], [i for i in N-1:-1:1])
		println(A)
end
  ╠═╡ =#

# ╔═╡ eba3fb50-9159-414a-85fc-23f63a7cc443
# ╠═╡ disabled = true
#=╠═╡
begin
	# массив с именем tmp вида (4, 6, 3);
	tmp = [4,6,3];
	println(tmp)
end
  ╠═╡ =#

# ╔═╡ 61a69f6b-0efd-42a5-b374-037bed8eb6b4
# ╠═╡ disabled = true
#=╠═╡
begin
	# массив, в котором первый элемент массива tmp повторяется 10 раз;
	tmp = [4,6,3];
	tmp2 = [];
	for i in 1:1:10
		push!(tmp2,tmp[1])
	end
	
	println(tmp2)
end
  ╠═╡ =#

# ╔═╡ 042277b0-33a0-4ca4-99f6-09b1cefd3bc0
# ╠═╡ disabled = true
#=╠═╡
begin
	#массив, в котором все элементы массива tmp повторяются 10 раз;
	tmp = [4,6,3];
	tmp2 = [];
	
	tmp2 = repeat(tmp, 10);
	println(tmp2);
end
  ╠═╡ =#

# ╔═╡ 10cba4d8-4278-4bd7-88ad-db690db252c3
# ╠═╡ disabled = true
#=╠═╡
begin
	# массив, в котором первый элемент массива tmp встречается 11 раз, второй элемент — 10 раз, третий элемент — 10 раз;
	tmp = [4,6,3];
	tmp2 = [];
	
	for i in 11:-1:10
		if (i == 11)
			for k in i:-1:1
				push!(tmp2, tmp[1])
			end
		end
		
		if (i == 10)
			for k in i:-1:1
				push!(tmp2, tmp[2])
			end
			for k in i:-1:1
				push!(tmp2, tmp[3])
			end
		end
	end
	
	println(tmp2)
end
  ╠═╡ =#

# ╔═╡ bb99837d-cf43-4710-8b13-46c321d3a759
# ╠═╡ disabled = true
#=╠═╡
begin
	# массив, в котором первый элемент массива tmp встречается 10 раз подряд, второй
	# элемент — 20 раз подряд, третий элемент — 30 раз подряд;
	
	tmp = [4,6,3];
	tmp2 = vcat(fill(tmp[1], 10), fill(tmp[2], 20), fill(tmp[3], 30));
	
	println(tmp2);
	
end
  ╠═╡ =#

# ╔═╡ 6bd34541-e5b6-409e-b2ff-8f51ce57f74d
# ╠═╡ disabled = true
#=╠═╡
begin
	tmp = [4,6,3];
	tmp2 = [];

	function count_6s_in_number(num)
    	count = 0
    	while num != 0
        	if num % 10 == 6
            	count += 1
        	end
        	num = div(num, 10)
    	end
    	return count
	end


	push!(tmp2, 2^tmp[1])
	push!(tmp2, 2^tmp[2])
	
	for i in 1:1:4
		push!(tmp2, 2^tmp[3])
	end
	
	println(tmp2)


	let amount_six = 0
	for i in 1:1:length(tmp2)
		amount_six += count_6s_in_number(tmp2[i])
	end

	println(amount_six)
	
end
end	
  ╠═╡ =#

# ╔═╡ f2c4a73f-3793-43f2-8360-65a4c23f3a18
# ╠═╡ disabled = true
#=╠═╡
begin
	function calculate_y(x)
	    return exp(x) * cos(x)
	end
	
	x = 3:0.1:6
	y = calculate_y.(x)
	
	mean_y = mean(y)
	println(y)
	println(mean_y)
	
end
  ╠═╡ =#

# ╔═╡ 89f62233-e8d7-4d7e-b722-bd1aaccc6a16
# ╠═╡ disabled = true
#=╠═╡
begin
	x = 0.1
	y = 0.2
	
	j = 1;
	
	result = [];
	
	for i in 3:3:36
		if (j != 37)
			push!(result, [(x^i, y^j)])
			j += 3
		end
	end
	
	println(result)
	
	
end
  ╠═╡ =#

# ╔═╡ 9262b9b0-fb82-4ddc-9955-f94c09eed433
# ╠═╡ disabled = true
#=╠═╡
begin
	M = 25
	
	result = [2^i / i for i in 1:M]
	
	
	println(result)
end
  ╠═╡ =#

# ╔═╡ 337eb11e-5345-4053-9f3c-32232aa7aff8
# ╠═╡ disabled = true
#=╠═╡
begin
	N = 30
	
	vector = ["fn$i" for i in 1:N]
	
	println(vector)
end
  ╠═╡ =#

# ╔═╡ 819e999c-1be2-4809-9e20-bc391ee4d03d
begin
	
	n = 250
	population = 0:999
	
	# Установка seed для воспроизводимости случайных чисел
	Random.seed!(123)
	

	x = rand(population, n)
	y = rand(population, n)
	
	println("Вектор 𝒙:")
	println(x)
	
	println("Вектор 𝒚:")
	println(y)
end

# ╔═╡ 7b54fea7-014b-47af-9dab-498bd67450cd
# ╠═╡ disabled = true
#=╠═╡
begin
	diff_vector = y[2:end] - x[1:end-1]
	
	println("Вектор (𝑦2 − 𝑥1, … , 𝑦𝑛 − 𝑥𝑛−1):")
	println(diff_vector)
end
  ╠═╡ =#

# ╔═╡ db848e0d-e961-4a82-bb19-07fb3f35b554
# ╠═╡ disabled = true
#=╠═╡
begin
	l = length(x)
	result = zeros(l-2)
	
	for i in 1:(l-2)
	    result[i] = x[i] + 2x[i+1] - x[i+2]
	end
	
	println("Вектор (𝑥1 + 2𝑥2 − 𝑥3, 𝑥2 + 2𝑥3 − 𝑥4, … , 𝑥𝑛−2 + 2𝑥𝑛−1 − 𝑥𝑛):")
	println(result)
end
  ╠═╡ =#

# ╔═╡ 72e9d9d0-1694-41e3-a24b-1f491bf54fb0
# ╠═╡ disabled = true
#=╠═╡
begin
	l = length(x)
	result = zeros(l-1)
	
	for i in 1:(l-1)
	    result[i] = sin(y[i]) / cos(x[i+1])
	end
	print("Vector (sin(𝑦1) / cos(𝑥2), sin(𝑦2) / cos(𝑥3), ..., sin(𝑦𝑛−1) / cos(𝑥𝑛)):")
	print(result)
end
  ╠═╡ =#

# ╔═╡ 8924a972-59a3-4a1a-84d4-068aecc7f46a
# ╠═╡ disabled = true
#=╠═╡
begin
	sum = 0;
	
	for i in 1:1:n-1
		sum += exp(-x[i+1]) / (x[i] + 10)
	end
	
	println(sum)
end
  ╠═╡ =#

# ╔═╡ e805b221-859f-44bf-8504-d3de23fe8af0
# ╠═╡ disabled = true
#=╠═╡
begin
	indexes = findall(y .> 600);
	println(y[indexes])
end
  ╠═╡ =#

# ╔═╡ d939c187-c90b-4535-9852-4d64f2df33cc
# ╠═╡ disabled = true
#=╠═╡
begin
	indexesY = findall(y .> 600);
	println(x[indexesY])
end
  ╠═╡ =#

# ╔═╡ c31e0f74-83e5-4225-97fb-02802de9f684
# ╠═╡ disabled = true
#=╠═╡
begin
	result = [];
	
	for i in 1:1:n
		push!(result, (abs(x[i] - mean(x)))^0.5)
	end
	
	println(result);
end
  ╠═╡ =#

# ╔═╡ d846f3df-311e-4955-925e-5ee26006003a
# ╠═╡ disabled = true
#=╠═╡
begin
	count = 0;
	max_y = maximum(y);
	
	for i in 1:1:n
		if abs(y[i] - max_y) <= 200
			count += 1;
		end
	end
	
	print(count);
end
  ╠═╡ =#

# ╔═╡ ec32ff22-f0a1-4f5e-808a-d029a0f2c136
# ╠═╡ disabled = true
#=╠═╡
begin
	even = 0;
	odd = 0;
	
	for i in 1:1:n
		if mod(x[i], 2) == 0
			even += 1;
		else
			odd += 1
		end
	end
	
	println("even = ", even);
	println("odd = ", odd);
end
  ╠═╡ =#

# ╔═╡ b9f905ea-9026-4fdc-9a45-a55861082434
# ╠═╡ disabled = true
#=╠═╡
begin
	dividyBySeven = 0;
	
		for i in 1:1:n
			if mod(x[i], 7) == 0
				dividyBySeven+= 1;
			end
		end
	println(dividyBySeven);
end
  ╠═╡ =#

# ╔═╡ bcb838f0-9d49-4f79-a9cc-d0771bc4f3ad
# ╠═╡ disabled = true
#=╠═╡
begin
	x_sort = x[sortperm(y)];
	println(x_sort);
end
  ╠═╡ =#

# ╔═╡ a96a478a-864b-4d3c-b1f4-870d22476684
# ╠═╡ disabled = true
#=╠═╡
begin
	x_sort = sort(x, rev=true);
	print(x_sort[1:10])
end
  ╠═╡ =#

# ╔═╡ 48fa43c4-14a1-4d8d-882d-f4d91876f77b
# ╠═╡ disabled = true
#=╠═╡
begin
	x_unique = unique(x);
	println(x_unique)
end
  ╠═╡ =#

# ╔═╡ 6e0bc254-11d0-42dd-81b8-16207477feb8
# ╠═╡ disabled = true
#=╠═╡
begin
	squares = [i^2 for i = 1:100];
	println(squares);
end
  ╠═╡ =#

# ╔═╡ f69f468d-46fd-40ed-a0a4-bc68ad3619d0
# ╠═╡ disabled = true
#=╠═╡
begin
	myprimes = primes(1000);
	println(myprimes)
	println(myprimes[89])
	println(myprimes[89:99])
end
  ╠═╡ =#

# ╔═╡ 0a39f670-ab23-43a4-87f2-b57678a11b42
begin
	sum = 1;
	temp = 1;
	
	for i in 3:2:39
		temp *= (i-1)/i
		sum += temp;
	end
	println(sum)
end

# ╔═╡ 40d59d95-830f-4ea3-838e-1710a1f78ef3
# ╠═╡ disabled = true
#=╠═╡
begin
	ar = [(i^3) + 4*(i^2) for i=10:1:100]
	sum = 0;
	for k  in 1:length(ar)
		sum += ar[k]
	end
	println(sum)
end
  ╠═╡ =#

# ╔═╡ 40d2e389-1dd1-4282-bc43-c84a22d246e5
# ╠═╡ disabled = true
#=╠═╡
begin
	ar = [((2^i)/i) + (3^i)/ (i^2) for i=1:1:25]
	sum = 0;
	for k  in 1:length(ar)
		sum += ar[k]
	end
	println(sum)
end
  ╠═╡ =#

# ╔═╡ 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
LinearAlgebra = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"
Primes = "27ebfcd6-29c5-5fa9-bf4b-fb8fc14df3ae"
Random = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"
Statistics = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"

[compat]
Primes = "~0.5.5"
"""

# ╔═╡ 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.8.5"
manifest_format = "2.0"
project_hash = "c5c2532074123463ea5b3cd4ba7b884bc3dd3099"

[[deps.Artifacts]]
uuid = "56f22d72-fd6d-98f1-02f0-08ddc0907c33"

[[deps.CompilerSupportLibraries_jll]]
deps = ["Artifacts", "Libdl"]
uuid = "e66e0078-7015-5450-92f7-15fbd957f2ae"
version = "1.0.1+0"

[[deps.IntegerMathUtils]]
git-tree-sha1 = "b8ffb903da9f7b8cf695a8bead8e01814aa24b30"
uuid = "18e54dd8-cb9d-406c-a71d-865a43cbb235"
version = "0.1.2"

[[deps.Libdl]]
uuid = "8f399da3-3557-5675-b5ff-fb832c97cbdb"

[[deps.LinearAlgebra]]
deps = ["Libdl", "libblastrampoline_jll"]
uuid = "37e2e46d-f89d-539d-b4ee-838fcccc9c8e"

[[deps.OpenBLAS_jll]]
deps = ["Artifacts", "CompilerSupportLibraries_jll", "Libdl"]
uuid = "4536629a-c528-5b80-bd46-f80d51c5b363"
version = "0.3.20+0"

[[deps.Primes]]
deps = ["IntegerMathUtils"]
git-tree-sha1 = "1d05623b5952aed1307bf8b43bec8b8d1ef94b6e"
uuid = "27ebfcd6-29c5-5fa9-bf4b-fb8fc14df3ae"
version = "0.5.5"

[[deps.Random]]
deps = ["SHA", "Serialization"]
uuid = "9a3f8284-a2c9-5f02-9a11-845980a1fd5c"

[[deps.SHA]]
uuid = "ea8e919c-243c-51af-8825-aaa63cd721ce"
version = "0.7.0"

[[deps.Serialization]]
uuid = "9e88b42a-f829-5b0c-bbe9-9e923198166b"

[[deps.SparseArrays]]
deps = ["LinearAlgebra", "Random"]
uuid = "2f01184e-e22b-5df5-ae63-d93ebab69eaf"

[[deps.Statistics]]
deps = ["LinearAlgebra", "SparseArrays"]
uuid = "10745b16-79ce-11e8-11f9-7d13ad32a3b2"

[[deps.libblastrampoline_jll]]
deps = ["Artifacts", "Libdl", "OpenBLAS_jll"]
uuid = "8e850b90-86db-534c-a0d3-1478176c7d93"
version = "5.1.1+0"
"""

# ╔═╡ Cell order:
# ╠═a64b2d4f-b3d4-4fa1-ae10-6fb52333280c
# ╠═48e11170-85f7-11ee-0c4d-6940da779cf3
# ╠═47aa7228-e53e-4d76-8650-101bd7f2c656
# ╠═e3363869-652b-4a57-9ee1-d228fcb73efe
# ╠═ab02da8d-6264-48ba-a139-882daff60cc8
# ╠═cc0ef652-f0c2-4806-89c2-7ee45a53c034
# ╠═56fef717-73e9-4ce9-b0d3-ba9ae20fbd9c
# ╠═49bafc8d-10a8-49d6-b3fb-2fa1bb21cb02
# ╠═d9f60652-8cba-47c0-a696-8b5a3ab5284b
# ╠═f60b7626-a023-4b35-9c8c-767e181cba5c
# ╠═4387ae47-fecc-4c3d-86e9-97653c9fe19b
# ╠═012874f1-ff0b-4eb2-9a8c-b348d6724528
# ╠═619c9cff-af24-4823-895b-345445770a46
# ╠═eba3fb50-9159-414a-85fc-23f63a7cc443
# ╠═61a69f6b-0efd-42a5-b374-037bed8eb6b4
# ╠═042277b0-33a0-4ca4-99f6-09b1cefd3bc0
# ╠═10cba4d8-4278-4bd7-88ad-db690db252c3
# ╠═bb99837d-cf43-4710-8b13-46c321d3a759
# ╠═6bd34541-e5b6-409e-b2ff-8f51ce57f74d
# ╠═f2c4a73f-3793-43f2-8360-65a4c23f3a18
# ╠═89f62233-e8d7-4d7e-b722-bd1aaccc6a16
# ╠═9262b9b0-fb82-4ddc-9955-f94c09eed433
# ╠═337eb11e-5345-4053-9f3c-32232aa7aff8
# ╠═819e999c-1be2-4809-9e20-bc391ee4d03d
# ╠═7b54fea7-014b-47af-9dab-498bd67450cd
# ╠═db848e0d-e961-4a82-bb19-07fb3f35b554
# ╠═72e9d9d0-1694-41e3-a24b-1f491bf54fb0
# ╠═8924a972-59a3-4a1a-84d4-068aecc7f46a
# ╠═e805b221-859f-44bf-8504-d3de23fe8af0
# ╠═d939c187-c90b-4535-9852-4d64f2df33cc
# ╠═c31e0f74-83e5-4225-97fb-02802de9f684
# ╠═d846f3df-311e-4955-925e-5ee26006003a
# ╠═ec32ff22-f0a1-4f5e-808a-d029a0f2c136
# ╠═b9f905ea-9026-4fdc-9a45-a55861082434
# ╠═bcb838f0-9d49-4f79-a9cc-d0771bc4f3ad
# ╠═a96a478a-864b-4d3c-b1f4-870d22476684
# ╠═48fa43c4-14a1-4d8d-882d-f4d91876f77b
# ╠═6e0bc254-11d0-42dd-81b8-16207477feb8
# ╠═f69f468d-46fd-40ed-a0a4-bc68ad3619d0
# ╠═40d59d95-830f-4ea3-838e-1710a1f78ef3
# ╠═40d2e389-1dd1-4282-bc43-c84a22d246e5
# ╠═0a39f670-ab23-43a4-87f2-b57678a11b42
# ╟─00000000-0000-0000-0000-000000000001
# ╟─00000000-0000-0000-0000-000000000002
